package main

import (
	"fmt"
	"time"
	"github.com/joho/godotenv"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	"log"
	"os"
)
// MODELS

type Lesson struct {
 Id int 				`json:"id"`
 Title string 			`json:"title"`
 Date time.Time 		`json:"date"`
 Discipline Discipline  `json:"discipline"`
}
func (Lesson) TableName() string {
	return "lesson"
}

type Student struct {
 Id int `json:"id"`
 Firstname string `json:"firstname"`
}
func (Student) TableName() string {
	return "student"
}

type Discipline struct {
 Id int `json:"id"`
 Name string `json:"name"`
}
func (Discipline) TableName() string {
	return "discipline"
}

type StudentHasLessons struct {
	StudentId int `json:"student"`
	LessonId int `json:"lesson"`
}

func (StudentHasLessons) TableName() string {
	return "student_has_lessons"
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	dbport := os.Getenv("DB_PORT")
	dbuser := os.Getenv("DB_USER")
	dbpass := os.Getenv("DB_PASS")
	dbname := os.Getenv("DB_NAME")
	serverport := os.Getenv("SERVER_PORT")

	dbstr := fmt.Sprintf("%s:%s@tcp(127.0.0.1:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local", dbuser, dbpass, dbport, dbname)

	db, err := gorm.Open("mysql", dbstr)
	if err != nil {
		log.Fatalf("Got error when connect database, the error is '%v'", err)
	}

	r := gin.Default()
	r.Use(SetDBtoContext(db))


    r.GET("/lesson", ListLesson)
   	r.POST("/lesson", CreateLesson)
   	r.GET("/lesson/:id", ReadLesson)
   	r.PUT("/lesson/:id", UpdateLesson)
   	r.DELETE("/lesson/:id", DeleteLesson)

    r.GET("/student", ListStudent)
   	r.POST("/student", CreateStudent)
   	r.GET("/student/:id", ReadStudent)
   	r.PUT("/student/:id", UpdateStudent)
   	r.DELETE("/student/:id", DeleteStudent)

    r.GET("/discipline", ListDiscipline)
   	r.POST("/discipline", CreateDiscipline)
   	r.GET("/discipline/:id", ReadDiscipline)
   	r.PUT("/discipline/:id", UpdateDiscipline)
   	r.DELETE("/discipline/:id", DeleteDiscipline)

    r.GET("/student_has_lessons", ReadStudentHasLessons)
    r.POST("/student_has_lessons", CreateStudentHasLessons)
    r.DELETE("/student_has_lessons", DeleteStudentHasLessons)

	r.Run(":" + serverport)
}


func ListLesson(c *gin.Context) {
	db := DBInstance(c)
	var listLesson []Lesson
	query := "SELECT * FROM lesson limit 10;"
	db.Raw(query).Scan(&listLesson)
	c.JSON(200, listLesson)
}

func CreateLesson(c *gin.Context) {
	db := DBInstance(c)
	var lesson Lesson

	if err := c.Bind(&lesson); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Create(&lesson).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(201, lesson)
}

func ReadLesson(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var lesson Lesson
	if db.First(&lesson, id).Error != nil {
		content := gin.H{"error": "lesson with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	c.JSON(200, lesson)
}

func UpdateLesson(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var lesson Lesson
	if db.First(&lesson, id).Error != nil {
		content := gin.H{"error": "lesson with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if err := c.Bind(&lesson); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Save(&lesson).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(200, lesson)

}

func DeleteLesson(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var lesson Lesson
	if db.First(&lesson, id).Error != nil {
		content := gin.H{"error": "lesson with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	if err := db.Delete(&lesson).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	c.JSON(204, "deleted")
}

func ListStudent(c *gin.Context) {
	db := DBInstance(c)
	var listStudent []Student
	query := "SELECT * FROM student limit 10;"
	db.Raw(query).Scan(&listStudent)
	c.JSON(200, listStudent)
}

func CreateStudent(c *gin.Context) {
	db := DBInstance(c)
	var student Student

	if err := c.Bind(&student); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Create(&student).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(201, student)
}

func ReadStudent(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var student Student
	if db.First(&student, id).Error != nil {
		content := gin.H{"error": "student with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	c.JSON(200, student)
}

func UpdateStudent(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var student Student
	if db.First(&student, id).Error != nil {
		content := gin.H{"error": "student with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if err := c.Bind(&student); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Save(&student).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(200, student)

}

func DeleteStudent(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var student Student
	if db.First(&student, id).Error != nil {
		content := gin.H{"error": "student with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	if err := db.Delete(&student).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	c.JSON(204, "deleted")
}

func ListDiscipline(c *gin.Context) {
	db := DBInstance(c)
	var listDiscipline []Discipline
	query := "SELECT * FROM discipline limit 10;"
	db.Raw(query).Scan(&listDiscipline)
	c.JSON(200, listDiscipline)
}

func CreateDiscipline(c *gin.Context) {
	db := DBInstance(c)
	var discipline Discipline

	if err := c.Bind(&discipline); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Create(&discipline).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(201, discipline)
}

func ReadDiscipline(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var discipline Discipline
	if db.First(&discipline, id).Error != nil {
		content := gin.H{"error": "discipline with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	c.JSON(200, discipline)
}

func UpdateDiscipline(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var discipline Discipline
	if db.First(&discipline, id).Error != nil {
		content := gin.H{"error": "discipline with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}

	if err := c.Bind(&discipline); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if err := db.Save(&discipline).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(200, discipline)

}

func DeleteDiscipline(c *gin.Context) {
	db := DBInstance(c)
	id := c.Params.ByName("id")
	var discipline Discipline
	if db.First(&discipline, id).Error != nil {
		content := gin.H{"error": "discipline with id#" + id + " not found"}
		c.JSON(404, content)
		return
	}
	if err := db.Delete(&discipline).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	c.JSON(204, "deleted")
}


func ReadStudentHasLessons(c *gin.Context) {
	db := DBInstance(c)

	student, isStudent := c.GetQuery("student")
	lesson, isLesson := c.GetQuery("lesson")

	var list []StudentHasLessons
	query := "SELECT * FROM student_has_lessons where 1"

	if  isStudent {
		query = fmt.Sprintf("%s and student_id = %s ", query, student)
	}

	if  isLesson {
		query = fmt.Sprintf("%s and lesson_id = %s ", query, lesson)
	}

	db.Raw(query).Scan(&list)
	c.JSON(200, list)
}

func CreateStudentHasLessons(c *gin.Context) {
	db := DBInstance(c)

	var studentHasLesson StudentHasLessons
	if err := c.Bind(&studentHasLesson); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}
	if err := db.Create(&studentHasLesson).Error; err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	c.JSON(201, studentHasLesson)
}

func DeleteStudentHasLessons(c *gin.Context) {
	db := DBInstance(c)
	var studentHasLesson StudentHasLessons
	if err := c.Bind(&studentHasLesson); err != nil {
		c.JSON(400, gin.H{"error": err.Error()})
		return
	}

	if studentHasLesson.LessonId == 0 ||  studentHasLesson.StudentId == 0 {
		c.JSON(400, gin.H{"error": " "})
	}

	query := "DELETE FROM student_has_lessons where 1"
    query = fmt.Sprintf("%s and student_id = %d ", query, studentHasLesson.StudentId)
	query = fmt.Sprintf("%s and lesson_id = %d ", query, studentHasLesson.LessonId)

	db.Exec(query)
	c.JSON(200, "deleted")
}


func SetDBtoContext(db *gorm.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Set("DB", db)
		c.Next()
	}
}

func DBInstance(c *gin.Context) *gorm.DB {
	return c.MustGet("DB").(*gorm.DB)
}
